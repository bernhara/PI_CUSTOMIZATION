#!/bin/bash
# -*- mode: sh -*-

#
# This script implements a handler for "fuse mounts".
#
# To make the system use this handler, a corresponding "mount" command should be issued.
#
# When mounting an *already existing* directory D in mount_to_tmpfs_overlay mode, the directory D will be *remounted*
# on top of an overlay. This overlay is created inside a newly created created tmpfs file system.
# The result is that any further change to the directory D will me made in tmpfs and will not be commited
# to the initial storage location
# 
# For example, to use the mount_to_tmpfs_overlay mode in /etc/fstab, you can specify the fillowing line for example
#
#      mount_to_tmpfs_overlay  /var            fuse    size=200M,debug,defaults        0 0
#
# where:
#    "mount_to_tmpfs_overlay": is the name of that script.
#     The script should be located either in /usr/local/bin, /usr/local/sbin, /usr/bin, /usr/sbin, /bin or /sbin
#     which is the PATH configuration at boot time
#     The script may simply be symbolically link to one of these locations.
#
#     /var: the folder which will be *remounted* to a tmpfs overlay
#
#     Mount args:
#        "size" mount arg: the size of the tpmfs which will be created to hold the overlay
#        default value: 200M
#
#        "debug": activates some traces while script execution
#
#        "overlay_root_location": the root folder where the needed directory scructure will be created.
#        default value: /mnt/overlays/<remounted directory basename>
#        
#
#        the further arguments are passed to to the "overlay" mounting command.
#        So you may specify any usual mount arg, such as "ro"
#
# Limitations:
#
#    * The unmount process does not unmount the automatically created overlay nore the tmpfs

#
# Global configuration params
: ${OVERLAY_BASE_DIR:=/tmp}
: ${TMPFS_DEFAULT_SIZE:=200M}
: ${SHARE_PREVIOUS_CREATED_OVERLAY_BASE_DIR:=""}

DIR="$1"

if [ -z "${DIR}" ]
then
    echo "Directory name required" 1>&2
    exit 1
fi

if [ ! -d "${DIR}" ]
then
    echo "Target must be an already existing directory" 1>&2
    exit 1
fi

shift

if [ "$1" == "-o" ]
then
    shift
    mount_options="$1"
else
    mount_options=''
fi

declare -a mount_options_array=(
    $(
	IFS=','
	set -- ${mount_options}
	echo "$@"
    )
)

get_argument_value ()
{
    arg_specification="$1"
    arg_value=$(
	IFS='='
	set -- ${arg_specification}
	echo "$2"
    )
    echo "${arg_value}"
}
    

debug=false
tmpfs_size=${TMPFS_DEFAULT_SIZE}
extra_mount_option_list=''
overlay_mount_location="${OVERLAY_BASE_DIR}/overlays/$( basename "${DIR}" )"

for a in ${mount_options_array[@]}
do

    case "${a}" in
	debug*)
	    DEBUG=true
	    ;;

	size=*)
	    tmpfs_size=$( get_argument_value "$a" )
	    ;;

	overlay_mount_location=*)
	    overlay_mount_location=$( get_argument_value "$a" )
	    ;;

	*)
	    extra_mount_option_list="${extra_mount_option_list},${a}"
	    ;;
    esac

done

if [ -n "${DEBUG}" ]
then
    (
	echo "Args:"
	echo "$@"
	echo "Exec onfiguration:"
	echo "	tmpfs_size=${tmpfs_size}"
	echo "	extra_mount_option_list=${extra_mount_option_list}"
	echo "	overlay_mount_location=${overlay_mount_location}"
    ) 1>&2
fi

# TODO: find another way to check if overlay is available in the kernel
#! if ! grep -q overlay /proc/filesystems
#! then
#!     echo "Filesystem overlay is not available. You need a kernel update: apt-get update && apt-get upgrade"  1>&2
#!     exit 2
#! fi

if [ ! -d ${overlay_mount_location}/overlay ]
then
    mkdir -p ${overlay_mount_location}/overlay
fi

if [ -n "${SHARE_PREVIOUS_CREATED_OVERLAY_BASE_DIR}" ]
then
    #
    # share the underlying tmpfs if already created
    #

    #
    # check if target folder must be created as already tmpfs
    #
    overlay_fstype=$( stat -f -c '%T' ${overlay_mount_location}/overlay )

    if [ "${overlay_fstype}" != "tmpfs" ]
    then
	mount -t tmpfs -o size=${tmpfs_size} tmpfs ${overlay_mount_location}/overlay
    fi
else
    #
    # directly create the tmpfs
    #
    mount -t tmpfs -o size=${tmpfs_size} tmpfs ${overlay_mount_location}/overlay
fi

# Create structure in overlay folder
mkdir -p ${overlay_mount_location}/overlay/upper
mkdir -p ${overlay_mount_location}/overlay/work

# remount twice the initial folder to have still (ro) access to the lower content
mkdir -p ${overlay_mount_location}/overlay/lower
mount --bind -o ro "${DIR}" ${overlay_mount_location}/overlay/lower

# renount the initial folder on to of the overlay
mount -t overlay \
      -o lowerdir=${overlay_mount_location}/overlay/lower,upperdir=${overlay_mount_location}/overlay/upper,workdir=${overlay_mount_location}/overlay/work${extra_mount_option_list} \
      overlay \
      "${DIR}"
